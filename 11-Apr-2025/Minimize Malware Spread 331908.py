# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        max_uninfected = -1
        best_removed = -1

        adj_list = defaultdict(list)
        for r in range(len(graph)):
            for c in range(len(graph[0])):
                if graph[r][c] == 1:
                    adj_list[r].append(c)
                    adj_list[c].append(r)

        def dfs(node, infected):
            for neigh in adj_list[node]:
                if neigh not in infected:
                    infected.add(neigh)
                    dfs(neigh, infected)

        
        def infect(initial):
            infected = set()
            for node in initial:
                if node not in infected:
                    infected.add(node)
                    dfs(node, infected)

            return len(graph) - len(infected)

        for node in initial:
            copied = initial[:]
            copied.remove(node)
            uninfected = infect(copied)
            if uninfected > max_uninfected:
                best_removed = node
                max_uninfected = uninfected
            elif uninfected == max_uninfected:
                best_removed = min(best_removed, node)
        
        return best_removed